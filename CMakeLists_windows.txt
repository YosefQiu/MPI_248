cmake_minimum_required(VERSION 3.8.0)
project(CUDA_MPI VERSION 0.1.0 LANGUAGES C CXX CUDA)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -w -O3")
set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} --disable-warnings --expt-relaxed-constexpr")
set(CMAKE_CUDA_ARCHITECTURES 86)
set(DESTINATION_DIR "${CMAKE_BINARY_DIR}/res")
# Find CUDA
find_package(CUDAToolkit REQUIRED)
include_directories("${CUDAToolkit_INCLUDE_DIRS}")

# Find MPI
find_package(MPI REQUIRED)
include_directories(${MPI_INCLUDE_PATH})

# Add Common
file(GLOB Common_HEADER_FILES Common/*.h)
file(GLOB Common_GL_HEADER_FILES Common/GL/*.h)
file(GLOB Common_UtilNPP_HEADER_FILES Common/UtilNPP/*.h)

include_directories(Common)

# Add include path
include_directories(include)

# Find source files
file(GLOB_RECURSE SOURCE_FILES 
    src/*.c
    src/*.cc
    src/*.cpp
    src/*.cu)

file(GLOB_RECURSE HEADER_FILES 
    include/*.h
    include/*.hpp
    include/*.cuh)

file(GLOB_RECURSE RESOURCE_FILES
    res/data/*.raw)

source_group("Headers" FILES ${HEADER_FILES})
source_group("Sources" FILES ${SOURCE_FILES})
source_group("Common" FILES ${Common_HEADER_FILES})
source_group("Common\\GL" FILES ${Common_GL_HEADER_FILES})
source_group("Common\\UtilNPP" FILES ${Common_UtilNPP_HEADER_FILES})
source_group("Resources" FILES ${RESOURCE_FILES})

# Specific flags
if(WIN32)
    add_definitions(-D_AMD64_)
endif()

# Executables
add_executable(${PROJECT_NAME} 
    ${HEADER_FILES} 
    ${SOURCE_FILES} 
    ${Common_HEADER_FILES}
    ${Common_GL_HEADER_FILES} 
    ${Common_UtilNPP_HEADER_FILES}
	${RESOURCE_FILES})

# Handle resource file copying
file(COPY ${RESOURCE_FILES} DESTINATION ${DESTINATION_DIR})

# Set CUDA compiling properties
set_target_properties(${PROJECT_NAME} PROPERTIES CUDA_SEPARABLE_COMPILATION ON)

# Link MPI libraries
target_link_libraries(${PROJECT_NAME} ${MPI_LIBRARIES})
